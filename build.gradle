buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'org.spongepowered.mixin'

group = 'com.affehund'
version = '1.18.1-1.0.0'

java {
    archivesBaseName = 'skiing-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: '1.18.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.debug.export', 'true'
            args '-mixin.config=skiing.mixins.json'

            mods {
                skiing {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.debug.export', 'true'
            args '-mixin.config=skiing.mixins.json'

            mods {
                skiing {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.debug.export', 'true'
            args '-mixin.config=skiing.mixins.json'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'skiing', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                skiing {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.9'

    // mixins
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    // patchouli
/*    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.1-61:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.1-61")*/

    // jei
    compileOnly fg.deobf("mezz.jei:jei-1.18.1:9.1.0.47:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.1:9.1.0.47")
}

mixin {
    add sourceSets.main, "skiing.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "skiing.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "skiing",
                "Specification-Vendor"    : "Affehund",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Affehund",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "skiing.mixins.json"
        ])
    }
}

processResources {
    duplicatesStrategy = 'include'
}

jar.finalizedBy('reobfJar')
